using System.Diagnostics;
using System.Text.Json;

namespace DocuChef.TestConsoleApp;

/* 
===============================================================================
TEST.pptx ÌÖúÌîåÎ¶ø Î∂ÑÏÑù Î∞è Ï§ëÏ≤© foreach Íµ¨ÌòÑ ÌÖåÏä§Ìä∏
===============================================================================

üìã ÌÖúÌîåÎ¶ø Íµ¨Ï°∞:
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ Ïä¨ÎùºÏù¥Îìú 1  ‚îÇ ${Today:yyyy-MM-dd}                           ‚îÇ Ï†ïÏ†Å (Ï†úÎ™©)  ‚îÇ
‚îÇ Ïä¨ÎùºÏù¥Îìú 2  ‚îÇ ${Products[0].Key}                           ‚îÇ Í∑∏Î£π Ìó§Îçî    ‚îÇ
‚îÇ Ïä¨ÎùºÏù¥Îìú 3  ‚îÇ ${Products>Items[0]["Item_Ï∫êÎ¶≠ÌÑ∞_ÏÑ∏Î∂ÑÎ•ò_Î™Ö"]} ‚îÇ ÏïÑÏù¥ÌÖú Î™©Î°ù  ‚îÇ
‚îÇ             ‚îÇ ${Products>Items[1]["Item_Ï∫êÎ¶≠ÌÑ∞_ÏÑ∏Î∂ÑÎ•ò_Î™Ö"]} ‚îÇ (2Í∞úÏî© ÌëúÏãú) ‚îÇ
‚îÇ Ïä¨ÎùºÏù¥Îìú 4  ‚îÇ "END"                                        ‚îÇ Ï†ïÏ†Å (Ï¢ÖÎ£å)  ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

üìä Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞:
groupedItems = [
  { Key: "MININI", Items: ["BROWN", "CONY", "BROWN", "FRIENDS", "Hello" ] },    // 5Í∞ú
  { Key: "BT21",   Items: ["TATA", "CHIMMY", "COOKY", "SHOOKY"] }     // 4Í∞ú
]

üéØ ÏòàÏÉÅ Í≤∞Í≥º (Ï§ëÏ≤© foreach Ï†ÅÏö©):
1. Ï†úÎ™©: "2025-05-28"
2. Í∑∏Î£π1 Ìó§Îçî: "MININI" 
3. Í∑∏Î£π1 Î™©Î°ù1: "BROWN, CONY" (Items 1~2)
4. Í∑∏Î£π1 Î™©Î°ù2: "BROWN, FRIENDS" (Items 3~4)
5. Í∑∏Î£π2 Ìó§Îçî: "BT21"
6. Í∑∏Î£π2 Î™©Î°ù1: "TATA, CHIMMY" (Items 1~2)  
7. Í∑∏Î£π2 Î™©Î°ù2: "COOKY, SHOOKY" (Items 3~4)
8. Ï¢ÖÎ£å: "END"

üîß Íµ¨ÌòÑ ÎØ∏ÏÖò:
1. Ïä¨ÎùºÏù¥Îìú2: #foreach: Products (Í∑∏Î£πÎ≥Ñ Î∞òÎ≥µ)
2. Ïä¨ÎùºÏù¥Îìú3: #foreach: Products>Items, max: 2 (Í∑∏Î£π ÎÇ¥ ÏïÑÏù¥ÌÖú 2Í∞úÏî© Î∞òÎ≥µ)
3. Ï§ëÏ≤©Îêú foreach Ï≤òÎ¶¨Î°ú Ï¥ù 8Í∞ú Ïä¨ÎùºÏù¥Îìú ÏÉùÏÑ±
4. Context Operator (>) Ïò¨Î∞îÎ•∏ Ìï¥ÏÑù
5. ÌïúÍµ≠Ïñ¥ ÌÇ§("Item_Ï∫êÎ¶≠ÌÑ∞_ÏÑ∏Î∂ÑÎ•ò_Î™Ö") Ï†ïÏÉÅ Î∞îÏù∏Îî©

ÔøΩüìñ Ï∞∏Í≥†: SYNTAX_OF_PPT.md - "Nested Context Example", "Array Data Processing"
===============================================================================
*/

internal class Test1
{
  public static void Run(string fileName)
  {
    var basePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "files", "ppt");
    var templatePath = Path.Combine(basePath, fileName);
    var outputPath = Path.Combine(basePath, "test-output.pptx");

    Console.WriteLine("DocuChef Test1 - PowerPoint Template Processing");
    Console.WriteLine("===============================================\n");

    // Step 1: Inspect template before processing
    Console.WriteLine("Step 1: Template Inspection");
    Console.WriteLine("============================");
    TemplateInspector.InspectTemplate(templatePath);
    Console.WriteLine();

    // Step 2: Prepare test data    Console.WriteLine("Step 2: Preparing Test Data");
    Console.WriteLine("============================");
    //var dataPath = Path.Combine(basePath, "test-data.json");
    //var json = File.ReadAllText(dataPath);
    var json = @"[
    { ""Item_IP_ÎåÄ"": ""MININI"", ""Item_Ï∫êÎ¶≠ÌÑ∞_ÏÑ∏Î∂ÑÎ•ò_Î™Ö"": ""BROWN"", ""Hello"": ""World"", ""Image_Image_Src"": ""https://example.com/brown.jpg"" },
    { ""Item_IP_ÎåÄ"": ""MININI"", ""Item_Ï∫êÎ¶≠ÌÑ∞_ÏÑ∏Î∂ÑÎ•ò_Î™Ö"": ""CONY"", ""Hello"": ""World"", ""Image_Image_Src"": ""https://example.com/cony.jpg"" },
    { ""Item_IP_ÎåÄ"": ""BT21"", ""Item_Ï∫êÎ¶≠ÌÑ∞_ÏÑ∏Î∂ÑÎ•ò_Î™Ö"": ""TATA"", ""Hello"": ""World"", ""Image_Image_Src"": ""https://example.com/tata.jpg"" },
    { ""Item_IP_ÎåÄ"": ""BT21"", ""Item_Ï∫êÎ¶≠ÌÑ∞_ÏÑ∏Î∂ÑÎ•ò_Î™Ö"": ""CHIMMY"", ""Hello"": ""World"", ""Image_Image_Src"": ""https://example.com/chimmy.jpg"" },
    { ""Item_IP_ÎåÄ"": ""BT21"", ""Item_Ï∫êÎ¶≠ÌÑ∞_ÏÑ∏Î∂ÑÎ•ò_Î™Ö"": ""COOKY"", ""Hello"": ""World"", ""Image_Image_Src"": ""https://example.com/cooky.jpg"" },
    { ""Item_IP_ÎåÄ"": ""BT21"", ""Item_Ï∫êÎ¶≠ÌÑ∞_ÏÑ∏Î∂ÑÎ•ò_Î™Ö"": ""SHOOKY"", ""Hello"": ""World"", ""Image_Image_Src"": ""https://example.com/shooky.jpg"" },
    { ""Item_IP_ÎåÄ"": ""MININI"", ""Item_Ï∫êÎ¶≠ÌÑ∞_ÏÑ∏Î∂ÑÎ•ò_Î™Ö"": ""BROWN"", ""Hello"": ""World"", ""Image_Image_Src"": ""https://example.com/brown2.jpg"" },
    { ""Item_IP_ÎåÄ"": ""MININI"", ""Item_Ï∫êÎ¶≠ÌÑ∞_ÏÑ∏Î∂ÑÎ•ò_Î™Ö"": ""FRIENDS"", ""Hello"": ""World"", ""Image_Image_Src"": ""https://example.com/friends.jpg"" },
    { ""Item_IP_ÎåÄ"": ""MININI"", ""Item_Ï∫êÎ¶≠ÌÑ∞_ÏÑ∏Î∂ÑÎ•ò_Î™Ö"": ""HELLO"", ""Hello"": ""World"", ""Image_Image_Src"": ""https://example.com/hello.jpg"" }
    ]";
    var items = System.Text.Json.JsonSerializer.Deserialize<List<Dictionary<string, JsonElement>>>(json);

    var groupedItems = items
       .GroupBy(item => item.ContainsKey("Item_IP_ÎåÄ") ? item["Item_IP_ÎåÄ"].ToString() : "null")
       .Select(p =>
       {
         return new
         {
           p.Key,
           Items = p.ToArray()
         };
       });

    Console.WriteLine($"‚úÖ Prepared {items.Count} data items, grouped into {groupedItems.Count()} categories");
    foreach (var group in groupedItems)
    {
      Console.WriteLine($"   - {group.Key}: {group.Items.Length} items");
    }
    Console.WriteLine();

    // Step 3: Process template with DocuChef
    Console.WriteLine("Step 3: Processing Template with DocuChef");
    Console.WriteLine("==========================================");
    var chef = new Chef(new RecipeOptions() { EnableVerboseLogging = true });
    var recipe = chef.LoadRecipe(templatePath);
    recipe.AddVariable("Products", groupedItems);
    recipe.AddVariable("Today", DateTime.Now);

    Console.WriteLine("üç≥ Cooking template...");
    recipe.Cook(outputPath);
    Console.WriteLine($"‚úÖ Template processed successfully! Output: {outputPath}\n");    // Step 4: Verify output
    Console.WriteLine("Step 4: Output Verification");
    Console.WriteLine("============================");
    VerifyOutput.CheckDataBinding(outputPath);
    Console.WriteLine();

    // Step 4.5: Inspect generated file structure
    Console.WriteLine("Step 4.5: Generated File Analysis");
    Console.WriteLine("==================================");
    TemplateInspector.InspectGeneratedFile(outputPath);
    Console.WriteLine();

    // Step 5: Open output file
    Console.WriteLine("Step 5: Opening Output File");
    Console.WriteLine("============================");
    Console.WriteLine("üìÇ Opening generated PowerPoint file...");
    Process.Start(new ProcessStartInfo
    {
      FileName = "explorer",
      Arguments = outputPath,
      UseShellExecute = true,
      CreateNoWindow = true
    });

    Console.WriteLine("‚úÖ Test1 completed successfully!");
  }
}